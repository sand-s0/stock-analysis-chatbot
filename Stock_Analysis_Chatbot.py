# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_P2-M3Fc71ldo_V1nFs1v3Tb_9k_xTpO
"""

import yfinance as yf
import talib
import numpy as np
import requests
from textblob import TextBlob
import openai
import streamlit as st

def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    data = stock.history(period="6mo")
    return data

def get_news_sentiment(ticker):
    news_api_url = f"https://newsapi.org/v2/everything?q={ticker}&apiKey=YOUR_NEWSAPI_KEY"
    response = requests.get(news_api_url)
    if response.status_code != 200:
        return "No sentiment data available"

    articles = response.json().get("articles", [])
    sentiment_scores = []

    for article in articles[:5]:  # Analyze top 5 articles
        text = article.get("title", "") + " " + article.get("description", "")
        sentiment = TextBlob(text).sentiment.polarity
        sentiment_scores.append(sentiment)

    avg_sentiment = np.mean(sentiment_scores) if sentiment_scores else 0
    return "Positive" if avg_sentiment > 0 else "Negative" if avg_sentiment < 0 else "Neutral"

def get_ai_prediction(ticker):
    openai.api_key = "YOUR_OPENAI_API_KEY"
    prompt = f"Analyze the stock {ticker} and predict its short-term movement based on technical trends and sentiment."

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "You are an AI stock market analyst."},
                  {"role": "user", "content": prompt}]
    )

    return response["choices"][0]["message"]["content"].strip()

def analyze_stock(ticker):
    data = get_stock_data(ticker)

    if data.empty:
        return "Invalid stock ticker or no data available."

    close_prices = data['Close']

    # Moving Averages
    short_ma = talib.SMA(close_prices, timeperiod=20)
    long_ma = talib.SMA(close_prices, timeperiod=50)

    # Relative Strength Index (RSI)
    rsi = talib.RSI(close_prices, timeperiod=14)

    # News Sentiment Analysis
    sentiment = get_news_sentiment(ticker)

    # AI Prediction
    ai_prediction = get_ai_prediction(ticker)

    # Decision logic
    latest_price = close_prices[-1]
    latest_rsi = rsi[-1]
    latest_short_ma = short_ma[-1]
    latest_long_ma = long_ma[-1]

    recommendation = ""
    if latest_short_ma > latest_long_ma and latest_rsi < 70 and sentiment == "Positive":
        recommendation = "Stock is in an uptrend with positive sentiment. Consider buying."
    elif latest_short_ma < latest_long_ma and latest_rsi > 30 and sentiment == "Negative":
        recommendation = "Stock is in a downtrend with negative sentiment. Consider selling or holding."
    else:
        recommendation = "Stock is neutral. Monitor for more signals."

    return {
        "Latest Price": latest_price,
        "RSI": latest_rsi,
        "Short MA (20)": latest_short_ma,
        "Long MA (50)": latest_long_ma,
        "Sentiment": sentiment,
        "AI Prediction": ai_prediction,
        "Recommendation": recommendation
    }

# Streamlit Web App
st.title("AI-Powered Stock Analysis Chatbot")
ticker = st.text_input("Enter Stock Ticker (e.g., AAPL, TSLA, MSFT):")

if st.button("Analyze Stock"):
    if ticker:
        result = analyze_stock(ticker)
        st.write(result)
    else:
        st.warning("Please enter a valid stock ticker.")

# Install TA-Lib
!pip install TA-Lib

# Importing necessary libraries
import yfinance as yf
import talib  # This should now import successfully
import numpy as np
import requests
from textblob import TextBlob
import openai
import streamlit as st


def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    data = stock.history(period="6mo")
    return data

def get_news_sentiment(ticker):
    news_api_url = f"https://newsapi.org/v2/everything?q={ticker}&apiKey=YOUR_NEWSAPI_KEY"
    response = requests.get(news_api_url)
    if response.status_code != 200:
        return "No sentiment data available"

    articles = response.json().get("articles", [])
    sentiment_scores = []

    for article in articles[:5]:  # Analyze top 5 articles
        text = article.get("title", "") + " " + article.get("description", "")
        sentiment = TextBlob(text).sentiment.polarity
        sentiment_scores.append(sentiment)

    avg_sentiment = np.mean(sentiment_scores) if sentiment_scores else 0
    return "Positive" if avg_sentiment > 0 else "Negative" if avg_sentiment < 0 else "Neutral"

def get_ai_prediction(ticker):
    openai.api_key = "YOUR_OPENAI_API_KEY"
    prompt = f"Analyze the stock {ticker} and predict its short-term movement based on technical trends and sentiment."

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "You are an AI stock market analyst."},
                  {"role": "user", "content": prompt}]
    )

    return response["choices"][0]["message"]["content"].strip()

def analyze_stock(ticker):
    data = get_stock_data(ticker)

    if data.empty:
        return "Invalid stock ticker or no data available."

    close_prices = data['Close']

    # Moving Averages
    short_ma = talib.SMA(close_prices, timeperiod=20)
    long_ma = talib.SMA(close_prices, timeperiod=50)

    # Relative Strength Index (RSI)
    rsi = talib.RSI(close_prices, timeperiod=14)

    # News Sentiment Analysis
    sentiment = get_news_sentiment(ticker)

    # AI Prediction
    ai_prediction = get_ai_prediction(ticker)

    # Decision logic
    latest_price = close_prices[-1]
    latest_rsi = rsi[-1]
    latest_short_ma = short_ma[-1]
    latest_long_ma = long_ma[-1]

    recommendation = ""
    if latest_short_ma > latest_long_ma and latest_rsi < 70 and sentiment == "Positive":
        recommendation = "Stock is in an uptrend with positive sentiment. Consider buying."
    elif latest_short_ma < latest_long_ma and latest_rsi > 30 and sentiment == "Negative":
        recommendation = "Stock is in a downtrend with negative sentiment. Consider selling or holding."
    else:
        recommendation = "Stock is neutral. Monitor for more signals."

    return {
        "Latest Price": latest_price,
        "RSI": latest_rsi,
        "Short MA (20)": latest_short_ma,
        "Long MA (50)": latest_long_ma,
        "Sentiment": sentiment,
        "AI Prediction": ai_prediction,
        "Recommendation": recommendation
    }

# Streamlit Web App
st.title("AI-Powered Stock Analysis Chatbot")
ticker = st.text_input("Enter Stock Ticker (e.g., AAPL, TSLA, MSFT):")

if st.button("Analyze Stock"):
    if ticker:
        result = analyze_stock(ticker)
        st.write(result)
    else:
        st.warning("Please enter a valid stock ticker.")

# Install TA-Lib
!pip install TA-Lib

# Importing necessary libraries
import yfinance as yf
import talib
import numpy as np
import requests
from textblob import TextBlob
import openai
import streamlit as st

def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    data = stock.history(period="6mo")
    return data

def get_news_sentiment(ticker):
    news_api_url = f"https://newsapi.org/v2/everything?q={ticker}&apiKey=YOUR_NEWSAPI_KEY"
    response = requests.get(news_api_url)
    if response.status_code != 200:
        return "No sentiment data available"

    articles = response.json().get("articles", [])
    sentiment_scores = []

    for article in articles[:5]:  # Analyze top 5 articles
        text = article.get("title", "") + " " + article.get("description", "")
        sentiment = TextBlob(text).sentiment.polarity
        sentiment_scores.append(sentiment)

    avg_sentiment = np.mean(sentiment_scores) if sentiment_scores else 0
    return "Positive" if avg_sentiment > 0 else "Negative" if avg_sentiment < 0 else "Neutral"

def get_ai_prediction(ticker):
    openai.api_key = "YOUR_OPENAI_

# Install TA-Lib
!pip install TA-Lib

# Importing necessary libraries
import yfinance as yf
import talib
import numpy as np
import requests
from textblob import TextBlob
import openai
import streamlit as st

def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    data = stock.history(period="6mo")
    return data

def get_news_sentiment(ticker):
    news_api_url = f"https://newsapi.org/v2/everything?q={ticker}&apiKey=YOUR_NEWSAPI_KEY"
    response = requests.get(news_api_url)
    if response.status_code != 200:
        return "No sentiment data available"

    articles = response.json().get("articles", [])
    sentiment_scores = []

    for article in articles[:5]:  # Analyze top 5 articles
        text = article.get("title", "") + " " + article.get("description", "")
        sentiment = TextBlob(text).sentiment.polarity
        sentiment_scores.append(sentiment)

    avg_sentiment = np.mean(sentiment_scores) if sentiment_scores else 0
    return "Positive" if avg_sentiment > 0 else "Negative" if avg_sentiment < 0 else "Neutral"

def get_ai_prediction(ticker):
    openai.api_key = "YOUR_OPENAI_API_KEY"
    prompt = f"Analyze the stock {ticker} and predict its short-term movement based on technical trends and sentiment."

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "system", "content": "You are an AI stock market analyst."},
                  {"role": "user", "content": prompt}]
    )

    return response["choices"][0]["message"]["content"].strip()

def analyze_stock(ticker):
    data = get_stock_data(ticker)

    if data.empty:
        return "Invalid stock ticker or no data available."

    close_prices = data['Close']

    # Moving Averages
    short_ma = talib.SMA(close_prices, timeperiod=20)
    long_ma = talib.SMA(close_prices, timeperiod=50)

    # Relative Strength Index (RSI)
    rsi = talib.RSI(close_prices, timeperiod=14)

    # News Sentiment Analysis
    sentiment = get_news_sentiment(ticker)

    # AI Prediction
    ai_prediction = get_ai_prediction(ticker)

    # Decision logic
    latest_price = close_prices[-1]
    latest_rsi = rsi[-1]
    latest_short_ma = short_ma[-1]
    latest_long_ma = long_ma[-1]

    recommendation = ""
    if latest_short_ma > latest_long_ma and latest_rsi < 70 and sentiment == "Positive":
        recommendation = "Stock is in an uptrend with positive sentiment. Consider buying."
    elif latest_short_ma < latest_long_ma and latest_rsi > 30 and sentiment == "Negative":
        recommendation = "Stock is in a downtrend with negative sentiment. Consider selling or holding."
    else:
        recommendation = "Stock is neutral. Monitor for more signals."

    return {
        "Latest Price": latest_price,
        "RSI": latest_rsi,
        "Short MA (20)": latest_short_ma,
        "Long MA (50)": latest_long_ma,
        "Sentiment": sentiment,
        "AI Prediction": ai_prediction,
        "Recommendation": recommendation
    }

# Streamlit Web App
st.title("AI-Powered Stock Analysis Chatbot")
ticker = st.text_input("Enter Stock Ticker (e.g., AAPL, TSLA, MSFT):")

if st.button("Analyze Stock"):
    if ticker:
        result = analyze_stock(ticker)
        st.write(result)
    else:
        st.warning("Please enter a valid stock ticker.")

